type Mutation {
  createNucleusConnectConversations(input: CreateNucleusConnectConversationsInput!): NucleusConnectConversations
  createNucleusConnectMessages(input: CreateNucleusConnectMessagesInput!): NucleusConnectMessages
  createNucleusDiscoverChats(input: CreateNucleusDiscoverChatsInput!): NucleusDiscoverChats
  createNucleusDiscoverConversations(input: CreateNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  createNucleusDiscoverMessages(input: CreateNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  createNucleusDiscoverUsers(input: CreateNucleusDiscoverUsersInput!): NucleusDiscoverUsers
  deleteNucleusConnectConversations(input: DeleteNucleusConnectConversationsInput!): NucleusConnectConversations
  deleteNucleusConnectMessages(input: DeleteNucleusConnectMessagesInput!): NucleusConnectMessages
  deleteNucleusDiscoverChats(input: DeleteNucleusDiscoverChatsInput!): NucleusDiscoverChats
  deleteNucleusDiscoverConversations(input: DeleteNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  deleteNucleusDiscoverMessages(input: DeleteNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  deleteNucleusDiscoverUsers(input: DeleteNucleusDiscoverUsersInput!): NucleusDiscoverUsers
  updateNucleusConnectConversations(input: UpdateNucleusConnectConversationsInput!): NucleusConnectConversations
  updateNucleusConnectMessages(input: UpdateNucleusConnectMessagesInput!): NucleusConnectMessages
  updateNucleusDiscoverChats(input: UpdateNucleusDiscoverChatsInput!): NucleusDiscoverChats
  updateNucleusDiscoverConversations(input: UpdateNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  updateNucleusDiscoverMessages(input: UpdateNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  updateNucleusDiscoverUsers(input: UpdateNucleusDiscoverUsersInput!): NucleusDiscoverUsers
}

type NucleusConnectConversations {
  conversationId: String!
}

type NucleusConnectConversationsConnection {
  items: [NucleusConnectConversations]
  nextToken: String
}

type NucleusConnectMessages {
  conversationId: String!
  content: String
  author: NucleusDiscoverUsers
  recipient: NucleusDiscoverUsers
  timestamp: String
  messageId: String
}

type NucleusConnectMessagesConnection {
  items: [NucleusConnectMessages]
  nextToken: String
}

type NucleusDiscoverChats {
  author: String
  content: String
  conversationId: String!
  createdAt: String
  isRead: Boolean
  isReceived: Boolean
  isSent: Boolean
  messageId: [String]
  recipient: String
}

type NucleusDiscoverChatsConnection {
  items: [NucleusDiscoverChats]
  nextToken: String
}

type NucleusDiscoverConversations {
  author: NucleusDiscoverUsers
  content: String
  conversationId: String!
  createdAt: String
  isRead: Boolean
  isReceived: Boolean
  isSent: Boolean
  messageId: [String]!
  recipient: NucleusDiscoverUsers
}

type NucleusDiscoverConversationsConnection {
  items: [NucleusDiscoverConversations]
  nextToken: String
}

type NucleusDiscoverMessages {
  author: NucleusDiscoverUsers
  content: String
  conversationId: String!
  createdAt: String
  isRead: Boolean
  isReceived: Boolean
  messageId: String!
  recipient: NucleusDiscoverUsers
}

type NucleusDiscoverMessagesConnection {
  items: [NucleusDiscoverMessages]
  nextToken: String
}

type NucleusDiscoverUsers {
  firebaseId: String!
  geohash: String!
  offenses: Int
  online: Int
  paid: Boolean
  profilePic: String
  username: String
}

type NucleusDiscoverUsersConnection {
  items: [NucleusDiscoverUsers]
  nextToken: String
}

type Query {
  getNucleusConnectConversations(conversationId: String!): NucleusConnectConversations
  getNucleusConnectMessages(conversationId: String!): NucleusConnectMessages
  getNucleusDiscoverChats(conversationId: String!): NucleusDiscoverChats
  getNucleusDiscoverConversations(conversationId: String!, messageId: [String]!): NucleusDiscoverConversations
  getNucleusDiscoverMessages(conversationId: String!, messageId: String!): NucleusDiscoverMessages
  getNucleusDiscoverUsers(firebaseId: String!, geohash: String!): NucleusDiscoverUsers
  getOnlineNucleusDiscoverUsers(online: Int): [NucleusDiscoverUsers]
  listNucleusConnectConversations(filter: TableNucleusConnectConversationsFilterInput, limit: Int, nextToken: String): NucleusConnectConversationsConnection
  listNucleusConnectMessages(filter: TableNucleusConnectMessagesFilterInput, limit: Int, nextToken: String): NucleusConnectMessagesConnection
  listNucleusDiscoverChats(filter: TableNucleusDiscoverChatsFilterInput, limit: Int, nextToken: String): NucleusDiscoverChatsConnection
  listNucleusDiscoverConversations(filter: TableNucleusDiscoverConversationsFilterInput, limit: Int, nextToken: String): NucleusDiscoverConversationsConnection
  listNucleusDiscoverMessages(filter: TableNucleusDiscoverMessagesFilterInput, limit: Int, nextToken: String): NucleusDiscoverMessagesConnection
  listNucleusDiscoverUsers(filter: TableNucleusDiscoverUsersFilterInput, limit: Int, nextToken: String): NucleusDiscoverUsersConnection
}

type Schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Subscription {
  onCreateNucleusConnectConversations(conversationId: String): NucleusConnectConversations
    @aws_subscribe(mutations:["createNucleusConnectConversations"])
  onCreateNucleusConnectMessages(conversationId: String): NucleusConnectMessages
    @aws_subscribe(mutations:["createNucleusConnectMessages"])
  onCreateNucleusDiscoverChats(recipient: String): NucleusDiscoverChats
    @aws_subscribe(mutations:["createNucleusDiscoverChats"])
  onCreateNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["createNucleusDiscoverConversations"])
  onCreateNucleusDiscoverMessages(conversationId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["createNucleusDiscoverMessages"])
  onCreateNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
    @aws_subscribe(mutations:["createNucleusDiscoverUsers"])
  onDeleteNucleusConnectConversations(conversationId: String): NucleusConnectConversations
    @aws_subscribe(mutations:["deleteNucleusConnectConversations"])
  onDeleteNucleusConnectMessages(conversationId: String): NucleusConnectMessages
    @aws_subscribe(mutations:["deleteNucleusConnectMessages"])
  onDeleteNucleusDiscoverChats(conversationId: String): NucleusDiscoverChats
    @aws_subscribe(mutations:["deleteNucleusDiscoverChats"])
  onDeleteNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["deleteNucleusDiscoverConversations"])
  onDeleteNucleusDiscoverMessages(conversationId: String, messageId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["deleteNucleusDiscoverMessages"])
  onDeleteNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
    @aws_subscribe(mutations:["deleteNucleusDiscoverUsers"])
  onUpdateNucleusConnectConversations(conversationId: String): NucleusConnectConversations
    @aws_subscribe(mutations:["updateNucleusConnectConversations"])
  onUpdateNucleusConnectMessages(conversationId: String): NucleusConnectMessages
    @aws_subscribe(mutations:["updateNucleusConnectMessages"])
  onUpdateNucleusDiscoverChats(conversationId: String): NucleusDiscoverChats
    @aws_subscribe(mutations:["updateNucleusDiscoverChats"])
  onUpdateNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["updateNucleusDiscoverConversations"])
  onUpdateNucleusDiscoverMessages(conversationId: String, messageId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["updateNucleusDiscoverMessages"])
  onUpdateNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
    @aws_subscribe(mutations:["updateNucleusDiscoverUsers"])
}

input CreateNucleusConnectConversationsInput {
  conversationId: String!
}

input CreateNucleusConnectMessagesInput {
  conversationId: String!
  content: String
  author: CreateNucleusDiscoverUsersInput
  recipient: CreateNucleusDiscoverUsersInput
  timestamp: String
  messageId: String
}

input CreateNucleusDiscoverChatsInput {
  author: String
  content: String
  conversationId: String!
  createdAt: String
  isRead: Boolean
  isReceived: Boolean
  isSent: Boolean
  messageId: [String]
  recipient: String
}

input CreateNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]
}

input CreateNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input CreateNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
  offenses: Int
  online: Int
  paid: Boolean
  profilePic: String
  username: String
}

input DeleteNucleusConnectConversationsInput {
  conversationId: String!
}

input DeleteNucleusConnectMessagesInput {
  conversationId: String!
}

input DeleteNucleusDiscoverChatsInput {
  conversationId: String!
}

input DeleteNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]!
}

input DeleteNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input DeleteNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableNucleusConnectConversationsFilterInput {
  conversationId: TableStringFilterInput
}

input TableNucleusConnectMessagesFilterInput {
  conversationId: TableStringFilterInput
}

input TableNucleusDiscoverChatsFilterInput {
  conversationId: TableStringFilterInput
}

input TableNucleusDiscoverConversationsFilterInput {
  conversationId: TableStringFilterInput
  messageId: TableStringFilterInput
}

input TableNucleusDiscoverMessagesFilterInput {
  conversationId: TableStringFilterInput
  messageId: TableStringFilterInput
}

input TableNucleusDiscoverUsersFilterInput {
  firebaseId: TableStringFilterInput
  geohash: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateNucleusConnectConversationsInput {
  conversationId: String!
}

input UpdateNucleusConnectMessagesInput {
  conversationId: String!
}

input UpdateNucleusDiscoverChatsInput {
  conversationId: String!
}

input UpdateNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]!
}

input UpdateNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input UpdateNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
}
