type Mutation {
  createNucleusDiscoverConversations(input: CreateNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  createNucleusDiscoverMessages(input: CreateNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  createNucleusDiscoverUsers(input: CreateNucleusDiscoverUsersInput!): NucleusDiscoverUsers
  deleteNucleusDiscoverConversations(input: DeleteNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  deleteNucleusDiscoverMessages(input: DeleteNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  deleteNucleusDiscoverUsers(input: DeleteNucleusDiscoverUsersInput!): NucleusDiscoverUsers
  updateNucleusDiscoverConversations(input: UpdateNucleusDiscoverConversationsInput!): NucleusDiscoverConversations
  updateNucleusDiscoverMessages(input: UpdateNucleusDiscoverMessagesInput!): NucleusDiscoverMessages
  updateNucleusDiscoverUsers(input: UpdateNucleusDiscoverUsersInput!): NucleusDiscoverUsers
}

type NucleusDiscoverConversations {
  conversationId: String!
  messageId: [String]!

  author: NucleusDiscoverUsers
  content: String
  createdAt: String
  isRead: Boolean
  isReceived: Boolean
  isSent: Boolean
  recipient: NucleusDiscoverUsers
}

type NucleusDiscoverConversationsConnection {
  items: [NucleusDiscoverConversations]
  nextToken: String
}

type NucleusDiscoverMessages {
  conversationId: String!
  messageId: String!
  author: NucleusDiscoverUsers
  content: String
  createdAt: String
  recipient: NucleusDiscoverUsers
  isReceived: Boolean
  isRead: Boolean
}

type NucleusDiscoverMessagesConnection {
  items: [NucleusDiscoverMessages]
  nextToken: String
}

type NucleusDiscoverUsers {
  firebaseId: String!
  geohash: String!
  username: String
  offenses: Int
  online: Boolean
  paid: Boolean
  profilePic: String
}

type NucleusDiscoverUsersConnection {
  items: [NucleusDiscoverUsers]
  nextToken: String
}

type Query {
  getNucleusDiscoverConversations(conversationId: String!, messageId: [String]!): NucleusDiscoverConversations
  getNucleusDiscoverMessages(conversationId: String!, messageId: String!): NucleusDiscoverMessages
  getNucleusDiscoverUsers(firebaseId: String!, geohash: String!): NucleusDiscoverUsers
  listNucleusDiscoverConversations(filter: TableNucleusDiscoverConversationsFilterInput, limit: Int, nextToken: String): NucleusDiscoverConversationsConnection
  listNucleusDiscoverMessages(filter: TableNucleusDiscoverMessagesFilterInput, limit: Int, nextToken: String): NucleusDiscoverMessagesConnection
  listNucleusDiscoverUsers(filter: TableNucleusDiscoverUsersFilterInput, limit: Int, nextToken: String): NucleusDiscoverUsersConnection
}

type Schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Subscription {
  onCreateNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["createNucleusDiscoverConversations"])
  onCreateNucleusDiscoverMessages(conversationId: String, messageId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["createNucleusDiscoverMessages"])
  onCreateNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
    @aws_subscribe(mutations:["createNucleusDiscoverUsers"])
  onDeleteNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["deleteNucleusDiscoverConversations"])
  onDeleteNucleusDiscoverMessages(conversationId: String, messageId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["deleteNucleusDiscoverMessages"])
  onDeleteNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
    @aws_subscribe(mutations:["deleteNucleusDiscoverUsers"])
  onUpdateNucleusDiscoverConversations(conversationId: String, messageId: [String]): NucleusDiscoverConversations
    @aws_subscribe(mutations:["updateNucleusDiscoverConversations"])
  onUpdateNucleusDiscoverMessages(conversationId: String, messageId: String): NucleusDiscoverMessages
    @aws_subscribe(mutations:["updateNucleusDiscoverMessages"])
  onUpdateNucleusDiscoverUsers(firebaseId: String, geohash: String): NucleusDiscoverUsers
}

input CreateNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]!
}

input CreateNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input CreateNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
}

input DeleteNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]!
}

input DeleteNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input DeleteNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableNucleusDiscoverConversationsFilterInput {
  conversationId: TableStringFilterInput
  messageId: TableStringFilterInput
}

input TableNucleusDiscoverMessagesFilterInput {
  conversationId: TableStringFilterInput
  messageId: TableStringFilterInput
}

input TableNucleusDiscoverUsersFilterInput {
  firebaseId: TableStringFilterInput
  geohash: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateNucleusDiscoverConversationsInput {
  conversationId: String!
  messageId: [String]!
}

input UpdateNucleusDiscoverMessagesInput {
  conversationId: String!
  messageId: String!
}

input UpdateNucleusDiscoverUsersInput {
  firebaseId: String!
  geohash: String!
}
